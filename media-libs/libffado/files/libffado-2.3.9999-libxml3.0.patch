--- SConstruct	2016-10-26 15:39:42.211491282 +0200
+++ SConstruct	2016-10-26 15:42:41.450250489 +0200
@@ -276,7 +276,10 @@
         pkgs['libavc1394'] = '0.5.3'
 
     if not env['SERIALIZE_USE_EXPAT']:
-        pkgs['libxml++-2.6'] = '2.13.0'
+        if conf.CheckPKG('libxml++-3.0'):
+            pkgs['libxml++-3.0'] = '3.0.0'
+        if not('libxml++-3.0' in pkgs):
+            pkgs['libxml++-2.6'] = '2.13.0'
 
     # Provide a way for users to compile newer libffado which will work 
     # against older jack installations which will not accept the new API
@@ -358,6 +361,8 @@
     # produced.  Add the necessary option to CXXFLAGS if required.
     if conf.CheckPKG('libxml++-2.6 >= 2.39.1'):
         env.Append(CXXFLAGS = '-std=gnu++11')
+    if conf.CheckPKG('libxml++-3.0 >= 3.0.0'):
+        env.Append(CXXFLAGS = '-std=gnu++11')
 
     # Check for C99 lrint() and lrintf() functions used to convert from
     # float to integer more efficiently via float_cast.h.  If not
--- src/SConscript	2016-10-26 15:43:13.072855152 +0200
+++ src/SConscript	2016-10-26 15:48:13.750096169 +0200
@@ -288,6 +288,9 @@
 	libenv.MergeFlags( env['LIBIEC61883_FLAGS'] )
 	libenv.MergeFlags( env['LIBCONFIG_FLAGS'] )
 	if not env['SERIALIZE_USE_EXPAT']:
+            if 'LIBXML30_FLAGS' in env :
+		libenv.MergeFlags( env['LIBXML30_FLAGS'] )
+            if not('LIBXML30_FLAGS' in env) :
 		libenv.MergeFlags( env['LIBXML26_FLAGS'] )
 	else:
 		libenv.PrependUnique( LIBS=["expat"] )
--- support/firmware/SConscript	2016-10-26 15:52:13.744095832 +0200
+++ support/firmware/SConscript	2016-10-26 15:52:43.462724298 +0200
@@ -33,7 +33,10 @@
     env.MergeFlags( env['LIBRAW1394_FLAGS'] )
     env.MergeFlags( env['LIBIEC61883_FLAGS'] )
     if not env['SERIALIZE_USE_EXPAT']:
-        env.MergeFlags( env['LIBXML26_FLAGS'] )
+        if 'LIBXML30_FLAGS' in env :
+            env.MergeFlags( env['LIBXML30_FLAGS'] )
+        if not('LIBXML30_FLAGS' in env) :
+            env.MergeFlags( env['LIBXML26_FLAGS'] )
     else:
         env.PrependUnique( LIBS=["expat"] )
 
--- support/tools/SConscript	2016-10-26 15:56:54.108590793 +0200
+++ support/tools/SConscript	2016-10-26 15:57:44.109965690 +0200
@@ -33,6 +33,9 @@
 e.MergeFlags( "-I#/ -I#/src -L%ssrc -lffado" % env['build_base'] )
 if not e.GetOption( "clean" ):
         if not env['SERIALIZE_USE_EXPAT']:
+            if 'LIBXML30_FLAGS' in env :
+		e.MergeFlags( env['LIBXML30_FLAGS'] )
+            if not('LIBXML30_FLAGS' in env) :
                 e.MergeFlags( env['LIBXML26_FLAGS'] )
         else:
                 e.PrependUnique( LIBS=["expat"] )
--- support/dbus/SConscript	2016-10-26 15:59:35.037578904 +0200
+++ support/dbus/SConscript	2016-10-26 16:00:17.737045087 +0200
@@ -41,7 +41,10 @@
     env.MergeFlags( env["DBUSC1_FLAGS"] )
     env.MergeFlags( env['LIBRAW1394_FLAGS'] )
     if not env['SERIALIZE_USE_EXPAT']:
-        env.MergeFlags( env['LIBXML26_FLAGS'] )
+        if 'LIBXML30_FLAGS' in env :
+            env.MergeFlags( env['LIBXML30_FLAGS'] )
+        if not('LIBXML30_FLAGS' in env) :
+            env.MergeFlags( env['LIBXML26_FLAGS'] )
     else:
         env.PrependUnique( LIBS=["expat"] )
 
--- tests/SConscript	2016-10-26 16:01:32.628108820 +0200
+++ tests/SConscript	2016-10-26 16:02:02.606734036 +0200
@@ -32,6 +32,9 @@
 	env.MergeFlags( env['LIBIEC61883_FLAGS'] )
 	env.MergeFlags( env['LIBRAW1394_FLAGS'] )
 	if not env['SERIALIZE_USE_EXPAT']:
+            if 'LIBXML30_FLAGS' in env :
+		env.MergeFlags( env['LIBXML30_FLAGS'] )
+            if not('LIBXML30_FLAGS' in env) :
 		env.MergeFlags( env['LIBXML26_FLAGS'] )
 	else:
 		env.PrependUnique( LIBS=["expat"] )
--- src/libutil/serialize_libxml.h	2016-10-26 18:02:01.674733300 +0200
+++ src/libutil/serialize_libxml.h	2016-10-26 18:02:30.776369480 +0200
@@ -80,7 +80,7 @@
 
         DECLARE_DEBUG_MODULE;
 
-        xmlpp::Node* getNodePath( xmlpp::Node* pRootNode,
+        xmlpp::Element* getNodePath( xmlpp::Element* pRootNode,
                                   std::vector<std::string>& tokens );
     };
 
--- src/libutil/serialize_libxml.cpp	2016-10-26 18:20:51.202612259 +0200
+++ src/libutil/serialize_libxml.cpp	2016-10-26 18:21:12.587344913 +0200
@@ -75,11 +75,19 @@
 void
 Util::XMLSerialize::writeVersion()
 {
+#if LIBXMLXX_MAJOR_VERSION == 3
+    xmlpp::Element* pElem =  m_doc.get_root_node()->add_child_element( "CacheVersion" );
+#else
     xmlpp::Node* pNode = m_doc.get_root_node();
     xmlpp::Element* pElem = pNode->add_child( "CacheVersion" );
+#endif
     char* valstr;
     asprintf( &valstr, "%s", CACHE_VERSION );
+#if LIBXMLXX_MAJOR_VERSION == 3
+    pElem->set_first_child_text( valstr );
+#else
     pElem->set_child_text( valstr );
+#endif
     free( valstr );
 }
 
@@ -99,14 +107,22 @@
         return false;
     }
 
-    xmlpp::Node* pNode = m_doc.get_root_node();
+    xmlpp::Element* pNode = m_doc.get_root_node();
     pNode = getNodePath( pNode, tokens );
 
     // element to be added
+#if LIBXMLXX_MAJOR_VERSION == 3
+    xmlpp::Element* pElem = pNode->add_child_element( tokens[tokens.size() - 1] );
+#else
     xmlpp::Element* pElem = pNode->add_child( tokens[tokens.size() - 1] );
+#endif
     char* valstr;
     asprintf( &valstr, "%lld", value );
+#if LIBXMLXX_MAJOR_VERSION == 3
+    pElem->set_first_child_text( valstr );
+#else
     pElem->set_child_text( valstr );
+#endif
     free( valstr );
 
     return true;
@@ -127,18 +143,23 @@
         return false;
     }
 
-    xmlpp::Node* pNode = m_doc.get_root_node();
+    xmlpp::Element* pNode = m_doc.get_root_node();
     pNode = getNodePath( pNode, tokens );
 
     // element to be added
+#if LIBXMLXX_MAJOR_VERSION == 3
+    xmlpp::Element* pElem = pNode->add_child_element( tokens[tokens.size() - 1] );
+    pElem->set_first_child_text( str );
+#else
     xmlpp::Element* pElem = pNode->add_child( tokens[tokens.size() - 1] );
     pElem->set_child_text( str );
+#endif
 
     return true;
 }
 
-xmlpp::Node*
-Util::XMLSerialize::getNodePath( xmlpp::Node* pRootNode,
+xmlpp::Element*
+Util::XMLSerialize::getNodePath( xmlpp::Element* pRootNode,
                                  std::vector<string>& tokens )
 {
     // returns the correct node on which the new element has to be added.
@@ -149,7 +170,7 @@
     }
 
     unsigned int iTokenIdx = 0;
-    xmlpp::Node* pCurNode = pRootNode;
+    xmlpp::Element* pCurNode = pRootNode;
     for (bool bFound = false;
          ( iTokenIdx < tokens.size() - 1 );
          bFound = false, iTokenIdx++ )
@@ -160,7 +181,7 @@
               ++it )
         {
             if ( ( *it )->get_name() == tokens[iTokenIdx] ) {
-                pCurNode = *it;
+                pCurNode = (xmlpp::Element*) *it;
                 bFound = true;
                 break;
             }
@@ -171,7 +192,11 @@
     }
 
     for ( unsigned int i = iTokenIdx; i < tokens.size() - 1; i++, iTokenIdx++ ) {
+#if LIBXMLXX_MAJOR_VERSION == 3
+        pCurNode = pCurNode->add_child_element( tokens[iTokenIdx] );
+#else
         pCurNode = pCurNode->add_child( tokens[iTokenIdx] );
+#endif
     }
     return pCurNode;
 
@@ -254,17 +279,29 @@
 
     debugOutput( DEBUG_LEVEL_VERY_VERBOSE, "pNode = %s\n", pNode->get_name().c_str() );
 
+#if LIBXMLXX_MAJOR_VERSION == 3
+    xmlpp::Node::NodeSet nodeSet = pNode->find( strMemberName );
+    for ( xmlpp::Node::NodeSet::iterator it = nodeSet.begin();
+          it != nodeSet.end();
+          ++it )
+#else
     xmlpp::NodeSet nodeSet = pNode->find( strMemberName );
     for ( xmlpp::NodeSet::iterator it = nodeSet.begin();
           it != nodeSet.end();
           ++it )
+#endif
     {
         const xmlpp::Element* pElement =
             dynamic_cast< const xmlpp::Element* >( *it );
         if ( pElement && pElement->has_child_text() ) {
             char* tail;
+#if LIBXMLXX_MAJOR_VERSION == 3
+            value = strtoll( pElement->get_first_child_text()->get_content().c_str(),
+                             &tail, 0 );
+#else
             value = strtoll( pElement->get_child_text()->get_content().c_str(),
                              &tail, 0 );
+#endif
             debugOutput( DEBUG_LEVEL_VERY_VERBOSE, "found %s = %lld\n",
                          strMemberName.c_str(), value );
             return true;
@@ -290,15 +327,26 @@
     }
     xmlpp::Node* pNode = pDoc->get_root_node();
 
+#if LIBXMLXX_MAJOR_VERSION == 3
+    xmlpp::Node::NodeSet nodeSet = pNode->find( strMemberName );
+    for ( xmlpp::Node::NodeSet::iterator it = nodeSet.begin();
+          it != nodeSet.end();
+          ++it )
+#else
     xmlpp::NodeSet nodeSet = pNode->find( strMemberName );
     for ( xmlpp::NodeSet::iterator it = nodeSet.begin();
           it != nodeSet.end();
           ++it )
+#endif
     {
         const xmlpp::Element* pElement = dynamic_cast< const xmlpp::Element* >( *it );
         if ( pElement ) {
             if ( pElement->has_child_text() ) {
+#if LIBXMLXX_MAJOR_VERSION == 3
+                str = pElement->get_first_child_text()->get_content();
+#else
                 str = pElement->get_child_text()->get_content();
+#endif
             } else {
                 str = "";
             }
@@ -322,7 +370,11 @@
         return false;
     }
     xmlpp::Node* pNode = pDoc->get_root_node();
+#if LIBXMLXX_MAJOR_VERSION == 3
+    xmlpp::Node::NodeSet nodeSet = pNode->find( strMemberName );
+#else
     xmlpp::NodeSet nodeSet = pNode->find( strMemberName );
+#endif
     return nodeSet.size() > 0;
 }
 
